/*
 * Copyright (C) 2011 Jason von Nieda <jason@vonnieda.org>
 * 
 * This file is part of OpenPnP.
 * 
 * OpenPnP is free software: you can redistribute it and/or modify it under the terms of the GNU
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * OpenPnP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with OpenPnP. If not, see
 * <http://www.gnu.org/licenses/>.
 * 
 * For more information about OpenPnP visit http://openpnp.org
 */

package org.openpnp.gui.importer;

import java.awt.FileDialog;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FilenameFilter;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.BoxLayout;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.border.TitledBorder;

import org.openpnp.gui.support.MessageBoxes;
import org.openpnp.model.Board;
import org.openpnp.model.Board.Side;
import org.openpnp.model.Configuration;
import org.openpnp.model.LengthUnit;
import org.openpnp.model.Location;
import org.openpnp.model.Package;
import org.openpnp.model.Part;
import org.openpnp.model.Placement;

import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.FormSpecs;
import com.jgoodies.forms.layout.RowSpec;

@SuppressWarnings("serial")
public class EagleMountsmdUlpImporter implements BoardImporter {
    private final static String NAME = "EAGLE mountsmd.ulp";
    private final static String DESCRIPTION = "Import files generated by EAGLE's mountsmd.ulp.";

    private Board board;
    private File topFile, bottomFile;

    @Override
    public String getImporterName() {
        return NAME;
    }

    @Override
    public String getImporterDescription() {
        return DESCRIPTION;
    }

    @Override
    public Board importBoard(Frame parent) throws Exception {
        Dlg dlg = new Dlg(parent);
        dlg.setVisible(true);
        return board;
    }

// FCA special modifications to import the centroid.
// 1) If there is a problem of import, give the line incriminated. 
// 1a) show the bad line if a import problem of centroid file. 
// 2) If the import process is aborted, dont fill the list of packages or parts with a partial results. 
// 3) Suppress no ascii symbols (like the letter 'u' = micro) 
// 4) The centroid file parser is not the same
// @TODO add comments with the lexical data of this new centroid lines. (the goal is to concatenate in same time, 
// The reference (not friendly readable) of package, with a readable size of package. 
// Example of line 
// C1 14.00 16.00   0 ECA0080 CAPAE1350X140N H H_470ï¿½F
// ECA0080 : codification of part (reel)
// CAPAE1350X140N : Refence package IPC7351 (capa 1.3x5.0mm, 14.0height, N=normal pad)
// H_470uF  readable human package (Value & package)


    public static List<Placement> parseFile(File file, Side side, boolean createMissingParts)
            throws Exception {
    	
    	
    	
    	LineNumberReader reader =
                new LineNumberReader(new InputStreamReader(new FileInputStream(file),StandardCharsets.US_ASCII));
    	// Si il y a une seule erreur, les packages et les parts originaux ne sont pas atteints
        ArrayList<Placement> placements = new ArrayList<>();
        LinkedHashMap<String, Package> packages_temp = new LinkedHashMap<>();
        LinkedHashMap<String, Part> parts_temp = new LinkedHashMap<>();

        String line;
        Configuration cfg = Configuration.get();
        
        while ((line = reader.readLine()) != null) {
            line = line.trim();
            line = line.replaceAll("[^\\x0A\\x0D\\x20-\\x7E]", "?");
            if (line.length() == 0) {
                continue;
            }

            // C1 41.91 34.93 180 0.1uF ERE0001 Capacitor comment
            // T10 21.59 14.22 90 SOT23-BEC
            // printf("%s %5.2f %5.2f %3.0f %s %s %s %s\n",
            Pattern pattern = Pattern.compile(
                    "(\\S+)\\s+(-?\\d+\\.\\d+)\\s+(-?\\d+\\.\\d+)\\s+(-?\\d{1,3})\\s(\".+\")\\s(\".+\")\\s(\".+\")\\s(\".+\")");
            Matcher matcher = pattern.matcher(line);
            if (matcher.matches()==false)
            	{
            	throw new Exception("Pb import line nber "+reader.getLineNumber()+" contents:" +line);
            	}
            Placement placement = new Placement(matcher.group(1).replaceAll("\"", ""));
            placement.setLocation(new Location(LengthUnit.Millimeters,
                    Double.parseDouble(matcher.group(2)), Double.parseDouble(matcher.group(3)), 0,
                    Double.parseDouble(matcher.group(4))));
            // Recherche d'un part existant.
            if (cfg != null)
            	{
            	String partId = matcher.group(5).replaceAll("\"", "");
            	String packageId=matcher.group(6).replaceAll("\"", "");
            	String partComment = matcher.group(8).replaceAll("\"", "");
            	
            	Part part = cfg.getPart(partId);
            	Part part1= parts_temp.get(partId);
            	if (part1!=null)	// Existe en temporaire, fait semblant que cela vient du global. 
            		{
            		part=part1;
            		}
            	if (part != null) {
            			
            			Package pkg = cfg.getPackage(packageId);
            			placement.setPart(part);
            			}
            	else
            		{
                    if (createMissingParts)
                    	{
                    	// Creer un part qui devra etre rempli
                        part = new Part(partId);
                        part.setName(partComment);
                        Package pkg = cfg.getPackage(packageId);
                        Package pkg1 = packages_temp.get(packageId);
                        if (pkg1!=null)
                        	{
                        	pkg = pkg1;
                        	}
                        if (pkg == null) {
                        	String casePackage = matcher.group(7).replaceAll("\"", "");

                            pkg = new Package(packageId);
                            pkg.setDescription(casePackage);
                            packages_temp.put(packageId, pkg);
                        // Remplir
                        	}
                        part.setPackage(pkg);
                        parts_temp.put(partId,part);
            			placement.setPart(part);
                    	}
                    else
                        {
                    	// Pas de creation de parts ou package "in fly"
                    	placement.setPart(part);
                        }
                    	
            		}
            }

            placement.setSide(side);
            placements.add(placement);
        }
        reader.close();
        // all is good, copy temporaries list to official list
		// @TODO use stream for that. 
        for(String packageId : packages_temp.keySet())
        	{
        	cfg.addPackage(packages_temp.get(packageId));
        	}
        for(String partId : parts_temp.keySet())
    	{
    	cfg.addPart(parts_temp.get(partId));
    	}
        
        return placements;
    }

    class Dlg extends JDialog {
        private JTextField textFieldTopFile;
        private JTextField textFieldBottomFile;
        private final Action browseTopFileAction = new SwingAction();
        private final Action browseBottomFileAction = new SwingAction_1();
        private final Action importAction = new SwingAction_2();
        private final Action cancelAction = new SwingAction_3();
        private JCheckBox chckbxCreateMissingParts;

        public Dlg(Frame parent) {
            super(parent, DESCRIPTION, true);
            getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));

            JPanel panel = new JPanel();
            panel.setBorder(new TitledBorder(null, "Files", TitledBorder.LEADING, TitledBorder.TOP,
                    null, null));
            getContentPane().add(panel);
            panel.setLayout(new FormLayout(
                    new ColumnSpec[] {FormSpecs.RELATED_GAP_COLSPEC, FormSpecs.DEFAULT_COLSPEC,
                            FormSpecs.RELATED_GAP_COLSPEC, ColumnSpec.decode("default:grow"),
                            FormSpecs.RELATED_GAP_COLSPEC, FormSpecs.DEFAULT_COLSPEC,},
                    new RowSpec[] {FormSpecs.RELATED_GAP_ROWSPEC, FormSpecs.DEFAULT_ROWSPEC,
                            FormSpecs.RELATED_GAP_ROWSPEC, FormSpecs.DEFAULT_ROWSPEC,}));

            JLabel lblTopFilemnt = new JLabel("Top File (.mnt)");
            panel.add(lblTopFilemnt, "2, 2, right, default");

            textFieldTopFile = new JTextField();
            panel.add(textFieldTopFile, "4, 2, fill, default");
            textFieldTopFile.setColumns(10);

            JButton btnBrowse = new JButton("Browse");
            btnBrowse.setAction(browseTopFileAction);
            panel.add(btnBrowse, "6, 2");

            JLabel lblBottomFilemnb = new JLabel("Bottom File (.mnb)");
            panel.add(lblBottomFilemnb, "2, 4, right, default");

            textFieldBottomFile = new JTextField();
            panel.add(textFieldBottomFile, "4, 4, fill, default");
            textFieldBottomFile.setColumns(10);

            JButton btnBrowse_1 = new JButton("Browse");
            btnBrowse_1.setAction(browseBottomFileAction);
            panel.add(btnBrowse_1, "6, 4");

            JPanel panel_1 = new JPanel();
            panel_1.setBorder(new TitledBorder(null, "Options", TitledBorder.LEADING,
                    TitledBorder.TOP, null, null));
            getContentPane().add(panel_1);
            panel_1.setLayout(new FormLayout(
                    new ColumnSpec[] {FormSpecs.RELATED_GAP_COLSPEC, FormSpecs.DEFAULT_COLSPEC,},
                    new RowSpec[] {FormSpecs.RELATED_GAP_ROWSPEC, FormSpecs.DEFAULT_ROWSPEC,}));

            chckbxCreateMissingParts = new JCheckBox("Create Missing Parts");
            chckbxCreateMissingParts.setSelected(true);
            panel_1.add(chckbxCreateMissingParts, "2, 2");

            JSeparator separator = new JSeparator();
            getContentPane().add(separator);

            JPanel panel_2 = new JPanel();
            FlowLayout flowLayout = (FlowLayout) panel_2.getLayout();
            flowLayout.setAlignment(FlowLayout.RIGHT);
            getContentPane().add(panel_2);

            JButton btnCancel = new JButton("Cancel");
            btnCancel.setAction(cancelAction);
            panel_2.add(btnCancel);

            JButton btnImport = new JButton("Import");
            btnImport.setAction(importAction);
            panel_2.add(btnImport);

            setSize(400, 400);
            setLocationRelativeTo(parent);

            JRootPane rootPane = getRootPane();
            KeyStroke stroke = KeyStroke.getKeyStroke("ESCAPE");
            InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
            inputMap.put(stroke, "ESCAPE");
            rootPane.getActionMap().put("ESCAPE", cancelAction);
        }

        private class SwingAction extends AbstractAction {
            public SwingAction() {
                putValue(NAME, "Browse");
                putValue(SHORT_DESCRIPTION, "Browse");
            }

            public void actionPerformed(ActionEvent e) {
                FileDialog fileDialog = new FileDialog(Dlg.this);
                fileDialog.setFilenameFilter(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        return name.toLowerCase().endsWith(".mnt");
                    }
                });
                fileDialog.setVisible(true);
                if (fileDialog.getFile() == null) {
                    return;
                }
                File file = new File(new File(fileDialog.getDirectory()), fileDialog.getFile());
                textFieldTopFile.setText(file.getAbsolutePath());
            }
        }

        private class SwingAction_1 extends AbstractAction {
            public SwingAction_1() {
                putValue(NAME, "Browse");
                putValue(SHORT_DESCRIPTION, "Browse");
            }

            public void actionPerformed(ActionEvent e) {
                FileDialog fileDialog = new FileDialog(Dlg.this);
                fileDialog.setFilenameFilter(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        return name.toLowerCase().endsWith(".mnb");
                    }
                });
                fileDialog.setVisible(true);
                if (fileDialog.getFile() == null) {
                    return;
                }
                File file = new File(new File(fileDialog.getDirectory()), fileDialog.getFile());
                textFieldBottomFile.setText(file.getAbsolutePath());
            }
        }

        private class SwingAction_2 extends AbstractAction {
            public SwingAction_2() {
                putValue(NAME, "Import");
                putValue(SHORT_DESCRIPTION, "Import");
            }

            public void actionPerformed(ActionEvent e) {
                topFile = new File(textFieldTopFile.getText());
                bottomFile = new File(textFieldBottomFile.getText());
                board = new Board();
                List<Placement> placements = new ArrayList<>();
                try {
                    if (topFile.exists()) {
                        placements.addAll(parseFile(topFile, Side.Top,
                                chckbxCreateMissingParts.isSelected()));
                    }
                    if (bottomFile.exists()) {
                        placements.addAll(parseFile(bottomFile, Side.Bottom,
                                chckbxCreateMissingParts.isSelected()));
                    }
                }
                catch (Exception e1) {
                    MessageBoxes.errorBox(Dlg.this, "Import Error", e1);
                    return;
                }
                for (Placement placement : placements) {
                    board.addPlacement(placement);
                }
                setVisible(false);
            }
        }

        private class SwingAction_3 extends AbstractAction {
            public SwingAction_3() {
                putValue(NAME, "Cancel");
                putValue(SHORT_DESCRIPTION, "Cancel");
            }

            public void actionPerformed(ActionEvent e) {
                setVisible(false);
            }
        }
    }
}
